{"version":3,"sources":["config/constant.js","config/apiconfig.js","actions/countryDetail.js","actions/dailyData.js","pages/homepage/index.js","actions/country.js","actions/news.js","App.js","serviceWorker.js","reducers/country.js","reducers/countryDetail.js","reducers/daily.js","reducers/news.js","reducers/index.js","config/store.js","index.js"],"names":["Country","CountryDetail","Daily","News","covid19Api","axios","create","baseURL","newsApi","getCountryDetailAsync","countryId","dispatch","a","get","detail","type","data","model","connect","state","countryDetail","daily","news","getCountryDetailById","id","getGlobalData","res","setDailyChart","status","i","length","objectid","otherLocations","totalConfirmed","totalRecovered","reportDateString","push","setCountryList","setCountry","getNews","props","useState","labels","datasets","backgroundColor","hoverBackgroundColor","doughnut","setdoughnut","doughnutGlobal","setdoughnutGlobal","tabledata","settabledata","dailydata","setdailydata","dailydatamonth","setdailydatamonth","useEffect","defaultCountry","lastUpdate","global","confirmed","value","deaths","recovered","dailyarray","dailyrecovered","dailyconfirmed","label","borderColor","pointBackgroundColor","dailymonth","monthrecovered","monthconfirmed","unshift","tableGlobal","list","country","locations","countryRegion","provinceState","moment","format","Grid","container","direction","justify","alignItems","items","xs","lg","md","sm","wrap","Card","style","width","CardContent","Typography","Container","TableContainer","Table","columns","name","options","selectableRows","responsive","List","marginTop","articles","map","ListItem","ListItemAvatar","Avatar","alt","author","src","urlToImage","ListItemText","primary","href","url","title","secondary","Fragment","content","publishedAt","marginBottom","App","Boolean","window","location","hostname","match","initState","currentCountry","countries","totalResult","countriesData","Object","values","action","combinedReducer","combineReducers","reducer","store","createStore","compose","applyMiddleware","thunk","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0202e914.chunk.js","sourcesContent":["/**\n *  this is constant variabel\n */\n\n//  country\n    export const Country = {\n        \"GET_ALL\" : \"GET_ALL\",\n        \"DELETE_COUNTRY\" : \"DELETE_COUNTRY\",\n        \"SET_COUNTRY\" : \"SET_COUNTRY\",\n        \"UNSET_COUNTRY\" : \"UNSET_COUNTRY\"\n    };\n//end of country \n\n\n// constant for getting all detail in the country\n    export const CountryDetail = {\n        \"SET_DATA\" : \"SET_LIST_DATA\",\n        \"SET_DEFAULT_COUNTRY\" : \"SET_COUNTRTY_DETAIL_DATA\",\n        \"SET_GLOBAL_DATA\" : \"SET_GLOBAL_DATA\",\n        \"DELETE_DATA\" : \"DELETE_DATA\"\n    };\n// end constant for getting all detail in the country\n\n\n// constant for getting data from daily\n    export const Daily = {\n        \"SET_DATA\" : \"SET_DAILY_DATA\"\n    }\n// end constant for getting data from daily\n\n\n// constant for getting data from api newsorg\nexport const News = {\n    \"GET_NEWS_DATA\" : \"GET_NEWS_DATA\",\n}\n// end constant for getting data from api newsorg","/**\n * this file is usinf for setting up the configure of the api\n */\nimport axios from 'axios';\n\nexport const covid19Api = axios.create({\n    baseURL : \"https://covid19.mathdro.id/\",\n});\n\n// news api 3669b0deabbd4827810cda4cc61cea5d\n\nexport const newsApi = axios.create({\n    baseURL : \"http://newsapi.org/\"\n});","import {CountryDetail} from '../config/constant';\nimport {covid19Api} from '../config/apiconfig';\n\nexport const getCountryDetailAsync = (countryId = \"id\") => {\n    return async dispatch => {\n        const detail = await covid19Api.get(`api/countries/${countryId}`);\n        if(detail) {\n            dispatch({\n                type : CountryDetail.SET_DEFAULT_COUNTRY,\n                data : detail.data\n            });\n        }\n    }\n}\n\n\nexport const setGlobalDataAsync = () => {\n    return async dispatch => {\n        const res = await covid19Api.get(`api/`);\n        if(res.data){\n            dispatch({\n                type : CountryDetail.SET_GLOBAL_DATA,\n                data : res.data\n            })\n        }\n    }\n}\n\nexport const setCountryListAsync = () => {\n    return async dispatch => {\n        var res = await covid19Api.get(`api/confirmed`);\n        dispatch({\n            type: CountryDetail.SET_DATA,\n            data : res.data\n        })\n    };\n}\n","import {covid19Api} from '../config/apiconfig';\nimport {Daily} from '../config/constant';\n\nlet model = {\n    \"id\" : null,\n    \"otherLocations\": null,\n    \"totalConfirmed\": null,\n    \"totalRecovered\": null,\n    \"reportDateString\": \"\",\n};\n\nexport const setDailyChartAsync = () => {\n    return async dispatch => {\n        const res = await covid19Api.get(\"api/daily\");\n        let data = [];\n        if(res.status === 200){\n            for(let i = (res.data.length - 1); i >= 0; i--){\n                model.id = res.data[i].objectid;\n                model.otherLocations = res.data[i].otherLocations\n                model.totalConfirmed = res.data[i].totalConfirmed;\n                model.totalRecovered = res.data[i].totalRecovered;\n                model.reportDateString = res.data[i].reportDateString;\n                data.push(model);\n                model = {};\n            }\n            dispatch({\n                type : Daily.SET_DATA,\n                data : data\n            });\n        }\n    }\n}","import React, {useState, useEffect} from 'react';\nimport {connect} from 'react-redux';\nimport {\n    getCountryDetailAsync,\n    setGlobalDataAsync,\n    setCountryListAsync\n} from '../../actions/countryDetail';\nimport {\n    setDailyChartAsync\n} from '../../actions/dailyData';\nimport {\n    getCountries\n} from '../../actions/country';\nimport {\n    getNewsAsync\n} from '../../actions/news';\n\nimport {\n    Grid,\n    Card,\n    Avatar,\n    CardContent,\n    Container,\n    List,\n    ListItem,\n    ListItemText,\n    ListItemAvatar,\n    Typography,\n    Table,\n    TableContainer,\n} from '@material-ui/core';\nimport MaterialTable from 'mui-datatables';\nimport {\n    Doughnut,\n    Line\n} from \"react-chartjs-2\";\nimport moment from 'moment';\n\nconst Homepage = (props) => {\n    const [doughnut, setdoughnut] = useState({\n        labels: [\n            'Confirmed',\n            'Deaths',\n            'Recovered',\n        ],\n        datasets: [{\n            data: [0,0,0],\n            backgroundColor: [\n                '#FFCE56',\n                '#FA2D58',\n                '#15F900',\n            ],\n            hoverBackgroundColor: [\n                '#FFCE56',\n                '#FF6384',\n                '#36A2EB',\n            ]\n        }]\n    });\n\n    const [doughnutGlobal, setdoughnutGlobal] = useState({\n        labels: [\n            'Confirmed',\n            'Deaths',\n            'Recovered',\n        ],\n        datasets: [{\n            data: [0,0,0],\n            backgroundColor: [\n                '#FFCE56',\n                '#FA2D58',\n                '#15F900',\n            ],\n            hoverBackgroundColor: [\n                '#FFCE56',\n                '#FF6384',\n                '#36A2EB',\n            ]\n        }]\n    });\n\n    const columns = [{\n        name : \"locations\",\n        label : \"Locations\"\n    }, {\n        name : \"confirmed\",\n        label : \"Confirmed\"\n    }, {\n        name : \"recovered\",\n        label : \"Recovered\"\n    }, {\n        name : \"deaths\",\n        label : \"Deaths\"\n    }, {\n        name : \"lastUpdate\",\n        label : \"Last Update\"\n    }];\n\n    const [tabledata, settabledata] = useState([]);\n\n    const [dailydata, setdailydata] = useState({});\n    const [dailydatamonth, setdailydatamonth] = useState({});\n\n    useEffect(() => {\n        if(props.detail.defaultCountry.lastUpdate !== \"\"){\n            // set doughnut for global \n            setdoughnutGlobal({\n                ...doughnutGlobal,\n                datasets: [{\n                    ...doughnutGlobal.datasets[0],\n                    data : [\n                        props.detail.global.confirmed.value,\n                        props.detail.global.deaths.value,\n                        props.detail.global.recovered.value,\n                    ]\n                }]\n            });\n\n            // set doughnut for indonesia only\n            setdoughnut({\n                ...doughnut,\n                datasets: [{\n                    ...doughnut.datasets[0],\n                    data : [\n                        props.detail.defaultCountry.confirmed.value,\n                        props.detail.defaultCountry.deaths.value,\n                        props.detail.defaultCountry.recovered.value,\n                    ]\n                }]\n            });\n            // set label for all time\n            let dailyarray = {\n                labels : [],\n                datasets: []\n            };\n            let dailyrecovered = [];\n            // let dailydeaths = [];\n            let dailyconfirmed = [];\n            for(let i = (props.daily.data.length - 1); i >= 0; i--){\n                dailyarray.labels.push(props.daily.data[i].reportDateString);\n                dailyconfirmed.push(props.daily.data[i].totalConfirmed);\n                dailyrecovered.push(props.daily.data[i].totalRecovered);\n            }\n            dailyarray.datasets.push({\n                label : \"Recovered\",\n                borderColor : \"#15F900\",\n                backgroundColor: \"transparent\",\n                data : dailyrecovered\n            })\n            dailyarray.datasets.push({\n                label : \"Confirmed\",\n                borderColor: \"#F9F400\",\n                backgroundColor: \"transparent\",\n                pointBackgroundColor : \"#F9F400\",\n                data : dailyconfirmed\n            })\n            setdailydata(dailyarray);\n\n            // set per month\n            let dailymonth = {\n                labels : [],\n                datasets: []\n            };\n            let monthrecovered = [];\n            // let dailydeaths = [];\n            let monthconfirmed = [];\n            for(let i = (props.daily.data.length - 1); i >= 0; i--){\n                if(((props.daily.data.length - 1) - i) === 30){\n                    break;\n                }\n                dailymonth.labels.unshift(props.daily.data[((props.daily.data.length) - i)].reportDateString);\n                monthconfirmed.unshift(props.daily.data[((props.daily.data.length) - i)].totalConfirmed);\n                monthrecovered.unshift(props.daily.data[((props.daily.data.length) - i)].totalRecovered);\n            }\n\n            dailymonth.datasets.push({\n                label : \"Recovered\",\n                borderColor : \"#15F900\",\n                backgroundColor: \"transparent\",\n                data : monthrecovered\n            })\n            dailymonth.datasets.push({\n                label : \"Confirmed\",\n                borderColor: \"#F9F400\",\n                backgroundColor: \"transparent\",\n                pointBackgroundColor : \"#F9F400\",\n                data : monthconfirmed\n            })\n            setdailydatamonth(dailymonth);\n\n            // set table\n            let tableGlobal = [];\n            for(let i in props.detail.list){\n                let country = props.detail.list;\n                tableGlobal.push({\n                    locations : `${country[i].countryRegion} ${country[i].provinceState ? country[i].provinceState : \"\"}`,\n                    confirmed : country[i].confirmed,\n                    recovered : country[i].recovered,\n                    deaths : country[i].deaths,\n                    lastUpdate : moment(country[i].lastUpdate).format(\"DD/MM/YYYY hh:mm:ss\")\n                });\n            }\n            settabledata(tableGlobal);\n        } else {\n            props.setCountry();\n            props.getGlobalData();\n            props.getCountryDetailById();\n            props.setDailyChart();\n            props.setCountryList();\n            props.getNews();\n        }\n    }, [props.detail]);\n\n    return (\n        <Grid\n            container\n            direction=\"column\"\n            justify=\"flex-start\"\n            alignItems=\"center\"\n        >\n            <Grid items xs={12} lg={12} md={12} sm={12} wrap='wrap-reverse'>\n                <Card style={{width: \"80vw\"}}>\n                    <CardContent>\n                        <Grid container direction=\"column\" alignItems=\"center\">\n                                <Grid items>\n                                    <h2>Global</h2>\n                                </Grid>\n                            </Grid>\n                            <Doughnut data={doughnutGlobal}/>\n                            <Grid items>\n                                <Typography>\n                                    Last Update = {moment(props.detail.global.lastUpdate).format(\"DD/MM/YYYY hh:mm:ss\")}\n                                </Typography>\n                            </Grid> \n                    </CardContent>\n                    <CardContent>\n                        <Grid container direction=\"column\" alignItems=\"center\">\n                            <Grid items>\n                                <h2>Indonesia</h2>\n                            </Grid>\n                        </Grid>\n                        <Doughnut data={doughnut}/>\n                        <Grid items>\n                            <Typography>\n                                Last Update = {moment(props.detail.defaultCountry.lastUpdate).format(\"DD/MM/YYYY hh:mm:ss\")}\n                            </Typography>\n                        </Grid>\n                    </CardContent>\n                    <Grid\n                        container\n                        direction=\"column\"\n                        justify=\"flex-start\"\n                        alignItems=\"center\"\n                    >\n                        <Grid items xs={12} lg={12} md={12} sm={12}>\n                            <h4>All Day</h4>\n                        </Grid>\n                    </Grid>\n                    <CardContent>\n                        <Line data={dailydata}/>\n                    </CardContent>\n                    <Grid\n                        container\n                        direction=\"column\"\n                        justify=\"flex-start\"\n                        alignItems=\"center\"\n                    >\n                        <Grid items xs={12} lg={12} md={12} sm={12}>\n                            <h4>Per 30 Day</h4>\n                        </Grid>\n                    </Grid>\n                    <CardContent>\n                        <Line data={dailydatamonth}/>\n                    </CardContent>\n                    <Grid\n                        container\n                        direction=\"column\"\n                        justify=\"flex-start\"\n                        alignItems=\"center\"\n                    >\n                        <Grid items xs={12} lg={12} md={12} sm={12}>\n                            <h4>Global</h4>\n                        </Grid>\n                    </Grid>\n                    <Container>\n                        <TableContainer>\n                            <Table>\n                                <MaterialTable\n                                    columns={columns}\n                                    data={tabledata}\n                                    options={{\n                                        selectableRows: \"none\",\n                                        responsive: \"scrollFullHeight\"\n                                    }}\n                                />\n                            </Table>\n                        </TableContainer>\n                    </Container>\n                    <Container>\n                        <List style={{marginTop: 50}}>\n                            {\n                                props.news.articles.map((data) => {\n                                    return (\n                                        <ListItem alignItems=\"flex-start\">\n                                            <ListItemAvatar>\n                                                <Avatar alt={data.author} src={data.urlToImage} />\n                                            </ListItemAvatar>\n                                            <ListItemText\n                                            primary={\n                                                <a href={data.url}>{data.title}</a>\n                                            }\n                                            secondary={\n                                                <React.Fragment>\n                                                    <div>\n                                                        {data.content}\n                                                    </div>\n                                                    <div>\n                                                        {moment(data.publishedAt).format(\"DD/MM/YYYY hh:mm:ss\")}\n                                                    </div>\n                                                </React.Fragment>\n                                            }\n                                            />\n                                        </ListItem>\n                                    )\n                                })\n                            }\n                        </List>\n                    </Container>\n                </Card>\n                <Grid\n                    container\n                    direction=\"column\"\n                    justify=\"flex-start\"\n                    alignItems=\"center\"\n                    style={{marginTop: 50, marginBottom: 20}}\n                >\n                    <Grid items>\n                        API From <a href=\"https://github.com/mathdroid/covid-19-api\">Mathdroid/covid-19-api</a>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </Grid>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        detail : state.countryDetail,\n        daily : state.daily,\n        news : state.news,\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        getCountryDetailById : (id = \"ID\") => dispatch(getCountryDetailAsync(id)),\n        getGlobalData : () => dispatch(setGlobalDataAsync()),\n        setDailyChart : () => dispatch(setDailyChartAsync()),\n        setCountryList : () => dispatch(setCountryListAsync()),\n        setCountry : () => dispatch(getCountries()),\n        getNews : () => dispatch(getNewsAsync()),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Homepage);","import {covid19Api} from '../config/apiconfig';\nimport {Country} from '../config/constant';\n\nexport const getCountries = () => {\n    return async dispatch => {\n        const res = await covid19Api.get(`api/countries`);\n        if(res.data){\n            dispatch({\n                type : Country.GET_ALL,\n                data : res.data\n            })\n        };\n    }\n}","/**\n *  function to get news\n */\n\nimport {\n    newsApi\n} from '../config/apiconfig';\nimport {\n    News\n} from '../config/constant';\n\n// v2/everything?domains=detik.com&q=corona&apiKey=3669b0deabbd4827810cda4cc61cea5d\nexport const getNewsAsync = () => {\n    return async dispatch => {\n        const res = await newsApi.get(\"v2/everything?domains=detik.com&q=corona&apiKey=3669b0deabbd4827810cda4cc61cea5d\");\n        if(res.data){\n            return dispatch({\n                type : News.GET_NEWS_DATA,\n                data : res.data\n            });\n        }\n    }\n}","import React from 'react';\nimport Homepage from './pages/homepage/index';\n\nfunction App() {\n  return (\n    <Homepage/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {Country} from '../config/constant';\nconst initState = {\n    currentCountry : \"\",\n    countries : []\n};\n\n/**\n *  this scope is using for reducer as a country reducer\n */\nconst action = (state = initState, data) => {\n    switch(data.type) {\n        case Country.GET_ALL : {\n            let countriesData = Object.values(data.data.countries);;\n            return {\n                ...state,\n                countries : countriesData\n            };\n        }\n        case Country.DELETE_COUNTRY : {\n            return initState;\n        }\n        case Country.SET_COUNTRY : {\n            return {\n                ...state,\n                currentCountry : data.data\n            };\n        }\n        case Country.UNSET_COUNTRY : {\n            return {\n                ...state,\n                currentCountry : \"\"\n            };\n        }\n        default : {\n            return state;\n        }\n    }\n};\n\nexport default action;","import {CountryDetail} from '../config/constant';\n\nconst initState = {\n    defaultCountry : {\n        confirmed : {},\n        recovered : {},\n        deaths : {},\n        lastUpdate : \"\"\n    },\n    global : {\n        confirmed : {},\n        recovered : {},\n        deaths : {},\n        lastUpdate : \"\"\n    },\n    list : []\n};\n\nconst action = (state = initState, data) => {\n    switch(data.type){\n        case CountryDetail.SET_DEFAULT_COUNTRY : {\n            return {\n                ...state,\n                defaultCountry : {\n                    confirmed : data.data.confirmed,\n                    recovered : data.data.recovered,\n                    deaths : data.data.deaths,\n                    lastUpdate : data.data.lastUpdate\n                }\n            };\n        }\n        case CountryDetail.SET_GLOBAL_DATA : {\n            return {\n                ...state,\n                global : {\n                    confirmed : data.data.confirmed,\n                    recovered : data.data.recovered,\n                    deaths : data.data.deaths,\n                    lastUpdate : data.data.lastUpdate\n                }\n            }\n        }\n        case CountryDetail.SET_DATA : {\n            return {\n                ...state,\n                list : data.data\n            }\n        }\n        case CountryDetail.DELETE_DATA : {\n            return initState;\n        }\n        default: {\n            return state;\n        }\n    }\n};\n\nexport default action;","import {Daily} from '../config/constant';\n\nconst initState = {\n    data : []\n}\n\nconst action = (state = initState, data) => {\n    switch(data.type) {\n        case Daily.SET_DATA : {\n            return {\n                ...state, \n                data : data.data\n            };\n        }\n        default: {\n            return state;\n        }\n    }\n};\n\nexport default action;","import {News} from '../config/constant';\n\nconst initState = {\n    status : \"\",\n    totalResult : \"\",\n    articles : []\n}\n\nconst action = (state = initState, action) => {\n    switch(action.type){\n        case News.GET_NEWS_DATA : {\n            return {\n                ...state,\n                status : action.data.status,\n                totalResult : action.data.totalResult,\n                articles : action.data.articles\n            };\n        }\n        default: \n            return state;\n    }\n};\n\nexport default action;","import country from './country';\nimport countryDetail from './countryDetail';\nimport daily from './daily';\nimport news from './news';\n\nexport default {\n    country: country,\n    countryDetail: countryDetail,\n    daily: daily,\n    news : news,\n};","import {\n    createStore,\n    combineReducers,\n    applyMiddleware,\n    compose\n} from 'redux'\nimport thunk from \"redux-thunk\";\n\nimport reducer from \"../reducers/index\";\n\nconst combinedReducer = combineReducers(reducer);\n\nconst store = createStore(\n    combinedReducer,\n    compose(\n        applyMiddleware(thunk),\n        (window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__()) || compose\n    )\n);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport {Provider} from 'react-redux';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport store from './config/store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, \n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}