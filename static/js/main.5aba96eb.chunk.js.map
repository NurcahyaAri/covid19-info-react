{"version":3,"sources":["config/constant.js","config/apiconfig.js","actions/countryDetail.js","pages/homepage/index.js","App.js","serviceWorker.js","reducers/country.js","reducers/countryDetail.js","reducers/index.js","config/store.js","index.js"],"names":["Country","CountryDetail","covid19Api","axios","create","baseURL","getCountryDetailAsync","countryId","dispatch","a","get","detail","data","connect","state","countryDetail","getCountryDetailById","id","props","useState","labels","datasets","backgroundColor","hoverBackgroundColor","doughnut","setdoughnut","useEffect","console","log","confirmed","lastUpdate","value","deaths","recovered","Grid","container","direction","justify","alignItems","items","xs","lg","md","sm","wrap","Card","style","width","CardContent","Typography","moment","format","App","Container","fluid","Boolean","window","location","hostname","match","initState","currentCountry","countries","country","type","countriesData","length","val","Object","keys","push","combinedReducer","combineReducers","reducer","store","createStore","compose","applyMiddleware","thunk","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iMAKiBA,EACG,UADHA,EAEU,iBAFVA,EAGO,cAHPA,EAIS,gBAMTC,EACI,WADJA,EAEO,c,QCZXC,E,OAAaC,EAAMC,OAAO,CACnCC,QAAU,gCCHDC,EAAwB,WAAuB,IAAtBC,EAAqB,uDAAT,KAC9C,8CAAO,WAAMC,GAAN,eAAAC,EAAA,sEACkBP,EAAWQ,IAAX,wBAAgCH,IADlD,QACGI,EADH,SAGCH,EAAS,CACL,KAASP,EACT,KAASU,EAAOC,OALrB,2CAAP,mDAAM,K,6DC8FKC,eAZS,SAACC,GACrB,MAAO,CACHH,OAASG,EAAMC,kBAII,SAACP,GACxB,MAAO,CACHQ,qBAAuB,eAACC,EAAD,uDAAM,KAAN,OAAeT,EAASF,EAAsBW,QAI9DJ,EAlFE,SAACK,GAAW,IAAD,EACQC,mBAAS,CACrCC,OAAQ,CACJ,YACA,SACA,aAEJC,SAAU,CAAC,CACPT,KAAM,CAAC,EAAE,EAAE,GACXU,gBAAiB,CACb,UACA,UACA,WAEJC,qBAAsB,CAClB,UACA,UACA,eAjBY,mBACjBC,EADiB,KACPC,EADO,KA2CxB,OArBAC,qBAAU,WACNC,QAAQC,IAAIV,EAAMP,QAClBgB,QAAQC,IAAIV,EAAMP,OAAOkB,YAAc,IACR,KAA5BX,EAAMP,OAAOmB,YACZH,QAAQC,IAAI,SACZH,EAAY,eACLD,EADI,CAEPH,SAAU,CAAC,eACJG,EAASH,SAAS,GADf,CAENT,KAAO,CACHM,EAAMP,OAAOkB,UAAUE,MACvBb,EAAMP,OAAOqB,OAAOD,MACpBb,EAAMP,OAAOsB,UAAUF,cAKnCb,EAAMF,yBAEX,CAACE,EAAMP,SAGN,kBAACuB,EAAA,EAAD,CACIC,WAAS,EACTC,UAAU,SACVC,QAAQ,aACRC,WAAW,UAEX,kBAACJ,EAAA,EAAD,CAAMK,OAAK,GACP,0CAEJ,kBAACL,EAAA,EAAD,CAAMK,OAAK,EAACC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,KAAK,gBAC7C,kBAACC,EAAA,EAAD,CAAMC,MAAO,CAACC,MAAO,SACjB,kBAACC,EAAA,EAAD,KACI,kBAAC,IAAD,CAAUpC,KAAMY,IAChB,kBAACU,EAAA,EAAD,CAAMK,OAAK,GACP,kBAACU,EAAA,EAAD,sBACmBC,IAAOhC,EAAMP,OAAOmB,YAAYqB,OAAO,gC,SC/DvEC,MARf,WACE,OACE,kBAACC,EAAA,EAAD,CAAWC,OAAK,GACd,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oBCjBAC,EAAY,CACdC,eAAiB,GACjBC,UAAY,ICDVF,EAAY,CACd/B,UAAY,GACZI,UAAY,GACZD,OAAS,GACTF,WAAa,ICHF,GACXiC,QFKW,WAA8B,IAA7BjD,EAA4B,uDAApB8C,EAAWhD,EAAS,uCACxC,OAAOA,EAAKoD,MACR,KAAKhE,EACD,IAAIiE,EAAgB,GACpB,GAA8B,IAA3BnD,EAAMgD,UAAUI,OACf,IAAK,IAAMC,KAAOC,OAAOC,KAAKzD,EAAKA,MAC/BqD,EAAcK,KAAK,CACf,KAASH,EACT,UAAcvD,EAAKA,KAAKuD,KAIpC,OAAO,eACArD,EADP,CAEIgD,UAAYG,IAGpB,KAAKjE,EACD,OAAO4D,EAEX,KAAK5D,EACD,OAAO,eACAc,EADP,CAEI+C,eAAiBjD,EAAKA,OAG9B,KAAKZ,EACD,OAAO,eACAc,EADP,CAEI+C,eAAiB,KAGzB,QACI,OAAO/C,IErCfC,cDIW,WAA8B,IAA7BD,EAA4B,uDAApB8C,EAAWhD,EAAS,uCACxC,OAAOA,EAAKoD,MACR,KAAK/D,EACD,OAAO,eACAa,EADP,CAEIe,UAAYjB,EAAKA,KAAKiB,UACtBI,UAAYrB,EAAKA,KAAKiB,UACtBG,OAASpB,EAAKA,KAAKoB,OACnBF,WAAalB,EAAKA,KAAKkB,aAG/B,KAAK7B,EACD,OAAO2D,EAEX,QACI,OAAO9C,KEdbyD,EAAkBC,YAAgBC,GAUzBC,EARDC,YACVJ,EACAK,YACIC,YAAgBC,KACftB,OAAOuB,sCAAwCvB,OAAOuB,wCAA2CH,M,OCN1GI,IAASC,OACL,kBAAC,IAAD,CAAUP,MAAOA,GACb,kBAAC,EAAD,OAEJQ,SAASC,eAAe,SLqHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhE,QAAQgE,MAAMA,EAAMC,a","file":"static/js/main.5aba96eb.chunk.js","sourcesContent":["/**\n *  this is constant variabel\n */\n\n//  country\n    export const Country = {\n        \"GET_ALL\" : \"GET_ALL\",\n        \"DELETE_COUNTRY\" : \"DELETE_COUNTRY\",\n        \"SET_COUNTRY\" : \"SET_COUNTRY\",\n        \"UNSET_COUNTRY\" : \"UNSET_COUNTRY\"\n    };\n//end of country \n\n\n// constant for getting all detail in the country\n    export const CountryDetail = {\n        \"SET_DATA\" : \"SET_DATA\",\n        \"DELETE_DATA\" : \"DELETE_DATA\"\n    };\n// end constant for getting all detail in the country","/**\n * this file is usinf for setting up the configure of the api\n */\nimport axios from 'axios';\n\nexport const covid19Api = axios.create({\n    baseURL : \"https://covid19.mathdro.id/\",\n});","import {CountryDetail} from '../config/constant';\nimport {covid19Api} from '../config/apiconfig';\n\nexport const getCountryDetailAsync = (countryId = \"id\") => {\n    return async dispatch => {\n        const detail = await covid19Api.get(`api/countries/${countryId}`);\n        if(detail) {\n            dispatch({\n                \"type\" : CountryDetail.SET_DATA,\n                \"data\" : detail.data\n            });\n        }\n    }\n}","import React, {useState, useEffect} from 'react';\nimport {connect} from 'react-redux';\nimport {\n    getCountryDetailAsync\n} from '../../actions/countryDetail';\nimport {\n    Grid,\n    Card,\n    CardContent,\n    Typography\n} from '@material-ui/core';\nimport {\n    Doughnut\n} from \"react-chartjs-2\";\nimport moment from 'moment';\n\nconst Homepage = (props) => {\n    const [doughnut, setdoughnut] = useState({\n        labels: [\n            'Confirmed',\n            'Deaths',\n            'Recovered',\n        ],\n        datasets: [{\n            data: [0,0,0],\n            backgroundColor: [\n                '#FFCE56',\n                '#FA2D58',\n                '#15F900',\n            ],\n            hoverBackgroundColor: [\n                '#FFCE56',\n                '#FF6384',\n                '#36A2EB',\n            ]\n        }]\n    });\n\n    useEffect(() => {\n        console.log(props.detail);\n        console.log(props.detail.confirmed === {});\n        if(props.detail.lastUpdate !== \"\"){\n            console.log(\"Tests\");\n            setdoughnut({\n                ...doughnut,\n                datasets: [{\n                    ...doughnut.datasets[0],\n                    data : [\n                        props.detail.confirmed.value,\n                        props.detail.deaths.value,\n                        props.detail.recovered.value,\n                    ]\n                }]\n            });\n        } else {\n            props.getCountryDetailById();\n        }\n    }, [props.detail]);\n\n    return (\n        <Grid\n            container\n            direction=\"column\"\n            justify=\"flex-start\"\n            alignItems=\"center\"\n        >\n            <Grid items>\n                <h2>Indonesia</h2>\n            </Grid>\n            <Grid items xs={12} lg={12} md={12} sm={12} wrap='wrap-reverse'>\n                <Card style={{width: \"60vw\"}}>\n                    <CardContent>\n                        <Doughnut data={doughnut}/>\n                        <Grid items>\n                            <Typography>\n                                Last Update = {moment(props.detail.lastUpdate).format(\"DD/MM/YYYY hh:mm:ss\")}\n                            </Typography>\n                        </Grid>\n                    </CardContent>\n                </Card>\n                \n            </Grid>\n        </Grid>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        detail : state.countryDetail\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        getCountryDetailById : (id = \"ID\") => dispatch(getCountryDetailAsync(id)),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Homepage);","import React from 'react';\nimport Homepage from './pages/homepage/index';\nimport {Container} from '@material-ui/core'\n\nfunction App() {\n  return (\n    <Container fluid>\n      <Homepage/>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {Country} from '../config/constant';\nconst initState = {\n    currentCountry : \"\",\n    countries : []\n};\n\n/**\n *  this scope is using for reducer as a country reducer\n */\nconst action = (state = initState, data) => {\n    switch(data.type) {\n        case Country.GET_ALL : {\n            let countriesData = [];\n            if(state.countries.length === 0){\n                for (const val in Object.keys(data.data)) {\n                    countriesData.push({\n                        \"name\" : val,\n                        \"countryId\" : data.data[val]\n                    });\n                }\n            }\n            return {\n                ...state,\n                countries : countriesData\n            };\n        }\n        case Country.DELETE_COUNTRY : {\n            return initState;\n        }\n        case Country.SET_COUNTRY : {\n            return {\n                ...state,\n                currentCountry : data.data\n            };\n        }\n        case Country.UNSET_COUNTRY : {\n            return {\n                ...state,\n                currentCountry : \"\"\n            };\n        }\n        default : {\n            return state;\n        }\n    }\n};\n\nexport default action;","import {CountryDetail} from '../config/constant';\n\nconst initState = {\n    confirmed : {},\n    recovered : {},\n    deaths : {},\n    lastUpdate : \"\"\n};\n\nconst action = (state = initState, data) => {\n    switch(data.type){\n        case CountryDetail.SET_DATA : {\n            return {\n                ...state,\n                confirmed : data.data.confirmed,\n                recovered : data.data.confirmed,\n                deaths : data.data.deaths,\n                lastUpdate : data.data.lastUpdate\n            };\n        }\n        case CountryDetail.DELETE_DATA : {\n            return initState;\n        }\n        default: {\n            return state;\n        }\n    }\n};\n\nexport default action;","import country from './country';\nimport countryDetail from './countryDetail';\n\nexport default {\n    country: country,\n    countryDetail: countryDetail\n};","import {\n    createStore,\n    combineReducers,\n    applyMiddleware,\n    compose\n} from 'redux'\nimport thunk from \"redux-thunk\";\n\nimport reducer from \"../reducers/index\";\n\nconst combinedReducer = combineReducers(reducer);\n\nconst store = createStore(\n    combinedReducer,\n    compose(\n        applyMiddleware(thunk),\n        (window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__()) || compose\n    )\n);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport {Provider} from 'react-redux';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport store from './config/store';\nimport 'rsuite/dist/styles/rsuite-default.css';\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, \n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}