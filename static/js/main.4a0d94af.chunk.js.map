{"version":3,"sources":["config/constant.js","config/apiconfig.js","actions/countryDetail.js","actions/dailyData.js","pages/homepage/index.js","actions/country.js","App.js","serviceWorker.js","reducers/country.js","reducers/countryDetail.js","reducers/daily.js","reducers/index.js","config/store.js","index.js"],"names":["Country","CountryDetail","Daily","covid19Api","axios","create","baseURL","getCountryDetailAsync","countryId","dispatch","a","get","detail","data","model","connect","state","countryDetail","daily","getCountryDetailById","id","setDailyChart","res","status","i","length","objectid","otherLocations","totalConfirmed","totalRecovered","reportDateString","push","type","setCountryList","setCountry","props","useState","labels","datasets","backgroundColor","hoverBackgroundColor","doughnut","setdoughnut","tabledata","settabledata","dailydata","setdailydata","dailydatamonth","setdailydatamonth","useEffect","defaultCountry","lastUpdate","confirmed","value","deaths","recovered","dailyarray","dailyrecovered","dailyconfirmed","label","borderColor","pointBackgroundColor","dailymonth","monthrecovered","monthconfirmed","unshift","tableGlobal","list","country","locations","countryRegion","provinceState","moment","format","console","log","Grid","container","direction","justify","alignItems","items","xs","lg","md","sm","wrap","Card","style","width","CardContent","Typography","Container","TableContainer","Table","columns","name","options","selectableRows","responsive","marginTop","marginBottom","href","App","Boolean","window","location","hostname","match","initState","currentCountry","countries","countriesData","Object","values","combinedReducer","combineReducers","reducer","store","createStore","compose","applyMiddleware","thunk","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4a0d94af.chunk.js","sourcesContent":["/**\n *  this is constant variabel\n */\n\n//  country\n    export const Country = {\n        \"GET_ALL\" : \"GET_ALL\",\n        \"DELETE_COUNTRY\" : \"DELETE_COUNTRY\",\n        \"SET_COUNTRY\" : \"SET_COUNTRY\",\n        \"UNSET_COUNTRY\" : \"UNSET_COUNTRY\"\n    };\n//end of country \n\n\n// constant for getting all detail in the country\n    export const CountryDetail = {\n        \"SET_DATA\" : \"SET_LIST_DATA\",\n        \"SET_DEFAULT_COUNTRY\" : \"SET_COUNTRTY_DETAIL_DATA\",\n        \"DELETE_DATA\" : \"DELETE_DATA\"\n    };\n// end constant for getting all detail in the country\n\n\n// constant for getting data from daily\n    export const Daily = {\n        \"SET_DATA\" : \"SET_DAILY_DATA\"\n    }\n// end constant for getting data from daily","/**\n * this file is usinf for setting up the configure of the api\n */\nimport axios from 'axios';\n\nexport const covid19Api = axios.create({\n    baseURL : \"https://covid19.mathdro.id/\",\n});","import {CountryDetail} from '../config/constant';\nimport {covid19Api} from '../config/apiconfig';\n\nexport const getCountryDetailAsync = (countryId = \"id\") => {\n    return async dispatch => {\n        const detail = await covid19Api.get(`api/countries/${countryId}`);\n        if(detail) {\n            dispatch({\n                \"type\" : CountryDetail.SET_DEFAULT_COUNTRY,\n                \"data\" : detail.data\n            });\n        }\n    }\n}\n\nexport const setCountryListAsync = () => {\n    return async dispatch => {\n        var res = await covid19Api.get(`api/confirmed`);\n        dispatch({\n            type: CountryDetail.SET_DATA,\n            data : res.data\n        })\n    };\n}","import {covid19Api} from '../config/apiconfig';\nimport {Daily} from '../config/constant';\n\nlet model = {\n    \"id\" : null,\n    \"otherLocations\": null,\n    \"totalConfirmed\": null,\n    \"totalRecovered\": null,\n    \"reportDateString\": \"\",\n};\n\nexport const setDailyChartAsync = () => {\n    return async dispatch => {\n        const res = await covid19Api.get(\"api/daily\");\n        let data = [];\n        if(res.status === 200){\n            for(let i = (res.data.length - 1); i >= 0; i--){\n                model.id = res.data[i].objectid;\n                model.otherLocations = res.data[i].otherLocations\n                model.totalConfirmed = res.data[i].totalConfirmed;\n                model.totalRecovered = res.data[i].totalRecovered;\n                model.reportDateString = res.data[i].reportDateString;\n                data.push(model);\n                model = {};\n            }\n            dispatch({\n                type : Daily.SET_DATA,\n                data : data\n            });\n        }\n    }\n}","import React, {useState, useEffect} from 'react';\nimport {connect} from 'react-redux';\nimport {\n    getCountryDetailAsync,\n    setCountryListAsync\n} from '../../actions/countryDetail';\nimport {\n    setDailyChartAsync\n} from '../../actions/dailyData';\nimport {\n    getCountries\n} from '../../actions/country';\n\n\nimport {\n    Grid,\n    Card,\n    CardContent,\n    Container,\n    Typography,\n    Table,\n    TableContainer,\n} from '@material-ui/core';\nimport MaterialTable from 'mui-datatables';\nimport {\n    Doughnut,\n    Line\n} from \"react-chartjs-2\";\nimport moment from 'moment';\n\nconst Homepage = (props) => {\n    const [doughnut, setdoughnut] = useState({\n        labels: [\n            'Confirmed',\n            'Deaths',\n            'Recovered',\n        ],\n        datasets: [{\n            data: [0,0,0],\n            backgroundColor: [\n                '#FFCE56',\n                '#FA2D58',\n                '#15F900',\n            ],\n            hoverBackgroundColor: [\n                '#FFCE56',\n                '#FF6384',\n                '#36A2EB',\n            ]\n        }]\n    });\n\n    const columns = [{\n        name : \"locations\",\n        label : \"Locations\"\n    }, {\n        name : \"confirmed\",\n        label : \"Confirmed\"\n    }, {\n        name : \"recovered\",\n        label : \"Recovered\"\n    }, {\n        name : \"deaths\",\n        label : \"Deaths\"\n    }, {\n        name : \"lastUpdate\",\n        label : \"Last Update\"\n    }];\n\n    const [tabledata, settabledata] = useState([]);\n\n    const [dailydata, setdailydata] = useState({});\n    const [dailydatamonth, setdailydatamonth] = useState({});\n\n    useEffect(() => {\n        if(props.detail.defaultCountry.lastUpdate !== \"\"){\n            setdoughnut({\n                ...doughnut,\n                datasets: [{\n                    ...doughnut.datasets[0],\n                    data : [\n                        props.detail.defaultCountry.confirmed.value,\n                        props.detail.defaultCountry.deaths.value,\n                        props.detail.defaultCountry.recovered.value,\n                    ]\n                }]\n            });\n            // set label for all time\n            let dailyarray = {\n                labels : [],\n                datasets: []\n            };\n            let dailyrecovered = [];\n            // let dailydeaths = [];\n            let dailyconfirmed = [];\n            for(let i = (props.daily.data.length - 1); i >= 0; i--){\n                dailyarray.labels.push(props.daily.data[i].reportDateString);\n                dailyconfirmed.push(props.daily.data[i].totalConfirmed);\n                dailyrecovered.push(props.daily.data[i].totalRecovered);\n            }\n            dailyarray.datasets.push({\n                label : \"Recovered\",\n                borderColor : \"#15F900\",\n                backgroundColor: \"transparent\",\n                data : dailyrecovered\n            })\n            dailyarray.datasets.push({\n                label : \"Confirmed\",\n                borderColor: \"#F9F400\",\n                backgroundColor: \"transparent\",\n                pointBackgroundColor : \"#F9F400\",\n                data : dailyconfirmed\n            })\n            setdailydata(dailyarray);\n\n            // set per month\n            let dailymonth = {\n                labels : [],\n                datasets: []\n            };\n            let monthrecovered = [];\n            // let dailydeaths = [];\n            let monthconfirmed = [];\n            for(let i = (props.daily.data.length - 1); i >= 0; i--){\n                if(((props.daily.data.length - 1) - i) === 30){\n                    break;\n                }\n                dailymonth.labels.unshift(props.daily.data[((props.daily.data.length) - i)].reportDateString);\n                monthconfirmed.unshift(props.daily.data[((props.daily.data.length) - i)].totalConfirmed);\n                monthrecovered.unshift(props.daily.data[((props.daily.data.length) - i)].totalRecovered);\n            }\n\n            dailymonth.datasets.push({\n                label : \"Recovered\",\n                borderColor : \"#15F900\",\n                backgroundColor: \"transparent\",\n                data : monthrecovered\n            })\n            dailymonth.datasets.push({\n                label : \"Confirmed\",\n                borderColor: \"#F9F400\",\n                backgroundColor: \"transparent\",\n                pointBackgroundColor : \"#F9F400\",\n                data : monthconfirmed\n            })\n            setdailydatamonth(dailymonth);\n\n            // set table\n            let tableGlobal = [];\n            for(let i in props.detail.list){\n                let country = props.detail.list;\n                tableGlobal.push({\n                    locations : `${country[i].countryRegion} ${country[i].provinceState ? country[i].provinceState : \"\"}`,\n                    confirmed : country[i].confirmed,\n                    recovered : country[i].recovered,\n                    deaths : country[i].deaths,\n                    lastUpdate : moment(country[i].lastUpdate).format(\"DD/MM/YYYY hh:mm:ss\")\n                });\n                console.log(tableGlobal);\n            }\n            settabledata(tableGlobal);\n        } else {\n            props.setCountry();\n            props.getCountryDetailById();\n            props.setDailyChart();\n            props.setCountryList();\n        }\n    }, [props.detail]);\n\n    return (\n        <Grid\n            container\n            direction=\"column\"\n            justify=\"flex-start\"\n            alignItems=\"center\"\n        >\n            <Grid items xs={12} lg={12} md={12} sm={12} wrap='wrap-reverse'>\n                <Card style={{width: \"80vw\"}}>\n                    <CardContent>\n                        <Grid container direction=\"column\" alignItems=\"center\">\n                            <Grid items>\n                                <h2>Corona In Indonesia</h2>\n                            </Grid>\n                        </Grid>\n                        <Doughnut data={doughnut}/>\n                        <Grid items>\n                            <Typography>\n                                Last Update = {moment(props.detail.defaultCountry.lastUpdate).format(\"DD/MM/YYYY hh:mm:ss\")}\n                            </Typography>\n                        </Grid>\n                    </CardContent>\n                    <Grid\n                        container\n                        direction=\"column\"\n                        justify=\"flex-start\"\n                        alignItems=\"center\"\n                    >\n                        <Grid items xs={12} lg={12} md={12} sm={12}>\n                            <h4>All Day</h4>\n                        </Grid>\n                    </Grid>\n                    <CardContent>\n                        <Line data={dailydata}/>\n                    </CardContent>\n                    <Grid\n                        container\n                        direction=\"column\"\n                        justify=\"flex-start\"\n                        alignItems=\"center\"\n                    >\n                        <Grid items xs={12} lg={12} md={12} sm={12}>\n                            <h4>Per 30 Day</h4>\n                        </Grid>\n                    </Grid>\n                    <CardContent>\n                        <Line data={dailydatamonth}/>\n                    </CardContent>\n                    <Grid\n                        container\n                        direction=\"column\"\n                        justify=\"flex-start\"\n                        alignItems=\"center\"\n                    >\n                        <Grid items xs={12} lg={12} md={12} sm={12}>\n                            <h4>Global</h4>\n                        </Grid>\n                    </Grid>\n                    <Container>\n                        <TableContainer>\n                            <Table>\n                                <MaterialTable\n                                    columns={columns}\n                                    data={tabledata}\n                                    options={{\n                                        selectableRows: \"none\",\n                                        responsive: \"scrollFullHeight\"\n                                    }}\n                                />\n                            </Table>\n                        </TableContainer>\n                    </Container>\n                </Card>\n                <Grid\n                    container\n                    direction=\"column\"\n                    justify=\"flex-start\"\n                    alignItems=\"center\"\n                    style={{marginTop: 50, marginBottom: 20}}\n                >\n                    <Grid items xs={12} lg={12} md={12} sm={12}>\n                        Made By Love\n                    </Grid>\n                    <Grid items>\n                        API From <a href=\"https://github.com/mathdroid/covid-19-api\">Mathdroid/covid-19-api</a>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </Grid>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        detail : state.countryDetail,\n        daily : state.daily,\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        getCountryDetailById : (id = \"ID\") => dispatch(getCountryDetailAsync(id)),\n        setDailyChart : () => dispatch(setDailyChartAsync()),\n        setCountryList : () => dispatch(setCountryListAsync()),\n        setCountry : () => dispatch(getCountries()),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Homepage);","import {covid19Api} from '../config/apiconfig';\nimport {Country} from '../config/constant';\n\nexport const getCountries = () => {\n    return async dispatch => {\n        const res = await covid19Api.get(`api/countries`);\n        if(res.data){\n            dispatch({\n                type : Country.GET_ALL,\n                data : res.data\n            })\n        };\n    }\n}","import React from 'react';\nimport Homepage from './pages/homepage/index';\n\nfunction App() {\n  return (\n    <Homepage/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {Country} from '../config/constant';\nconst initState = {\n    currentCountry : \"\",\n    countries : []\n};\n\n/**\n *  this scope is using for reducer as a country reducer\n */\nconst action = (state = initState, data) => {\n    switch(data.type) {\n        case Country.GET_ALL : {\n            let countriesData = Object.values(data.data.countries);;\n            return {\n                ...state,\n                countries : countriesData\n            };\n        }\n        case Country.DELETE_COUNTRY : {\n            return initState;\n        }\n        case Country.SET_COUNTRY : {\n            return {\n                ...state,\n                currentCountry : data.data\n            };\n        }\n        case Country.UNSET_COUNTRY : {\n            return {\n                ...state,\n                currentCountry : \"\"\n            };\n        }\n        default : {\n            return state;\n        }\n    }\n};\n\nexport default action;","import {CountryDetail} from '../config/constant';\n\nconst initState = {\n    defaultCountry : {\n        confirmed : {},\n        recovered : {},\n        deaths : {},\n        lastUpdate : \"\"\n    },\n    list : []\n};\n\nconst action = (state = initState, data) => {\n    switch(data.type){\n        case CountryDetail.SET_DEFAULT_COUNTRY : {\n            return {\n                ...state,\n                defaultCountry : {\n                    confirmed : data.data.confirmed,\n                    recovered : data.data.recovered,\n                    deaths : data.data.deaths,\n                    lastUpdate : data.data.lastUpdate\n                }\n            };\n        }\n        case CountryDetail.SET_DATA : {\n            return {\n                ...state,\n                list : data.data\n            }\n        }\n        case CountryDetail.DELETE_DATA : {\n            return initState;\n        }\n        default: {\n            return state;\n        }\n    }\n};\n\nexport default action;","import {Daily} from '../config/constant';\n\nconst initState = {\n    data : []\n}\n\nconst action = (state = initState, data) => {\n    switch(data.type) {\n        case Daily.SET_DATA : {\n            return {\n                ...state, \n                data : data.data\n            };\n        }\n        default: {\n            return state;\n        }\n    }\n};\n\nexport default action;","import country from './country';\nimport countryDetail from './countryDetail';\nimport daily from './daily';\n\nexport default {\n    country: country,\n    countryDetail: countryDetail,\n    daily: daily\n};","import {\n    createStore,\n    combineReducers,\n    applyMiddleware,\n    compose\n} from 'redux'\nimport thunk from \"redux-thunk\";\n\nimport reducer from \"../reducers/index\";\n\nconst combinedReducer = combineReducers(reducer);\n\nconst store = createStore(\n    combinedReducer,\n    compose(\n        applyMiddleware(thunk),\n        (window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__()) || compose\n    )\n);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport {Provider} from 'react-redux';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport store from './config/store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, \n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}